local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.Camera
local LocalPlayer = Players.LocalPlayer

-- Load OrionLib
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Create the main window
local Window = OrionLib:MakeWindow({
    Name = "Jailbreak | OrionLib",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "JBConfig"
})

-- Create a tab
local Tab = Window:MakeTab({
    Name = "Player Controls",
    PremiumOnly = false
})

-- Add a section for player controls
local Section = Tab:AddSection({
    Name = "Player List Management"
})

-- Placeholder for player list
local playerNames = {}
local selectedPlayer = nil -- To keep track of the selected player

-- Create the dropdown for player selection
local PlayerDropdown
PlayerDropdown = Tab:AddDropdown({
    Name = "Player List",
    Default = "Select a Player",
    Options = {"Loading..."},
    Callback = function(Value)
        selectedPlayer = Value
        print("Selected player:", selectedPlayer)
    end
})

-- Function to refresh the player list
local function refreshPlayerList()
    playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end

    -- If no players are found, provide a fallback
    if #playerNames == 0 then
        playerNames = {"No Players Found"}
    end

    -- Update the dropdown with the refreshed player list
    PlayerDropdown:Refresh(playerNames, playerNames[1])
end

-- Add a button to refresh the player list
Tab:AddButton({
    Name = "Refresh Player List",
    Callback = function()
        refreshPlayerList()
        print("Player list refreshed!")
    end    
})

-- Functionality to handle spectating
local isSpectating = false -- To keep track of the toggle state

Tab:AddToggle({
    Name = "Spectate Selected Player",
    Default = false,
    Callback = function(Value)
        if Value then
            -- Start spectating the selected player
            if selectedPlayer and selectedPlayer ~= LocalPlayer.Name then
                local targetPlayer = Players:FindFirstChild(selectedPlayer)
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
                    Camera.CameraSubject = targetPlayer.Character.Humanoid
                    isSpectating = true
                    print("Spectating:", selectedPlayer)
                else
                    print("Player not found or invalid.")
                end
            else
                print("Please select a valid player to spectate.")
            end
        else
            -- Stop spectating and reset to the local player
            Camera.CameraSubject = LocalPlayer.Character.Humanoid
            isSpectating = false
            print("Stopped spectating.")
        end
    end
})

-- Populate the initial player list
refreshPlayerList()

-- Initialize the UI
OrionLib:Init()

