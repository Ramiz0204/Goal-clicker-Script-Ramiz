local Players = game:GetService("Players")
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Jailbreak ",
    Icon = 0,
    LoadingTitle = "JB Stalker",
    LoadingSubtitle = "by zcp0",
    Theme = "Default",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Main"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

-- Main Tab Creation
local MainTab = Window:CreateTab("🏠 Home", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Spectating")

-- Create the Refresh Button to refresh the player list
local RefreshButton = MainTab:CreateButton({
    Name = "Refresh Player List",
    Callback = function()
        -- Get the current players from Players service
        local playerNames = {}
        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(playerNames, player.Name)
        end

        -- Update the dropdown options only if the player list is not empty
        if #playerNames > 0 then
            PlayerDropdown:SetOptions(playerNames) -- Set new options in the dropdown
            print("Player list refreshed!")
        else
            print("No players in the game.")
        end
    end,
})

-- Create the player dropdown under the "Spectating" section
local PlayerDropdown = MainTab:CreateDropdown({
    Name = "Player List",
    Options = {}, -- Start with an empty list
    CurrentOption = {}, -- No selection initially
    MultipleOptions = false,
    Flag = "PlayerListDropdown", -- Unique flag for the dropdown
    Callback = function(selectedOption)
        if selectedOption[1] then
            print("Selected player:", selectedOption[1])
            -- Add logic for what happens when a player is selected
        end
    end,
})

-- Initial population of the player list (automatically refresh the list)
local function refreshPlayerList()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    PlayerDropdown:SetOptions(playerNames)
end

-- Refresh the player list on script execution
refreshPlayerList()
