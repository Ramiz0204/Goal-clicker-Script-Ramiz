local Players = game:GetService("Players")

	
	
	
	
	local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


	local Window = Rayfield:CreateWindow({
		Name = "Jailbreak ",
		Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
		LoadingTitle = "JB Stalker",
		LoadingSubtitle = "by zcp0",
		Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
	 
		DisableRayfieldPrompts = false,
		DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
	 
		ConfigurationSaving = {
		   Enabled = true,
		   FolderName = nil, -- Create a custom folder for your hub/game
		   FileName = "Main"
		},
	 
		Discord = {
		   Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
		   Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		   RememberJoins = true -- Set this to false to make them join the discord every time they load it up
		},
	 
		KeySystem = false, -- Set this to true to use our key system
		KeySettings = {
		   Title = "Untitled",
		   Subtitle = "Key System",
		   Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
		   FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		   SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		   GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		   Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
		}
	 })

-- Main Tab Creation
local MainTab = Window:CreateTab("🏠 Home", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Spectating")

-- Create the player dropdown under the "Spectating" section
local PlayerDropdown = MainTab:CreateDropdown({
   Name = "Player List",
   Options = {}, -- Start with an empty list
   CurrentOption = {}, -- No selection initially
   MultipleOptions = false,
   Flag = "PlayerListDropdown", -- Unique flag for the dropdown
   Callback = function(selectedOption)
        if selectedOption[1] then
            print("Selected player:", selectedOption[1])
            -- Add logic for what happens when a player is selected
        end
   end,
})

-- Create the Refresh Button to refresh the player list
local RefreshButton = MainTab:CreateButton({
   Name = "Refresh Player List",
   Callback = function()
      -- Get the current players from Players service
      local playerNames = {}
      for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
         table.insert(playerNames, player.Name)
      end

      -- Update the dropdown options only if the player list is not empty
      if #playerNames > 0 then
         PlayerDropdown:SetOptions(playerNames) -- Set new options in the dropdown
         print("Player list refreshed!")
      else
         print("No players in the game.")
      end
   end,
})

-- Initial population of the player list (automatically refresh the list)
local function refreshPlayerList()
    local playerNames = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    PlayerDropdown:SetOptions(playerNames)
end

-- Refresh the player list on script execution
refreshPlayerList()
